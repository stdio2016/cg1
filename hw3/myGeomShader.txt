#version 150 compatibility

uniform float radius;
uniform int level;
uniform vec4 center;

layout(triangles) in;
layout(triangle_strip, max_vertices=128) out;

struct MyDiv {
  vec3 coord;
  vec3 normal;
  vec2 texCoord;
};
varying MyDiv mydiv[];

out vec3 vertexEyeSpace;
out vec3 fs_normal;
out vec2 fs_texCoord;

MyDiv makecenter(MyDiv a, MyDiv b) {
  MyDiv c;
  c.coord = normalize(a.coord + b.coord) * radius;
  c.normal = normalize(a.normal + b.normal);
  c.texCoord = (a.texCoord + b.texCoord)*0.5;
  return c;
}

void draw(MyDiv p, vec3 norm) {
  vec4 cc = vec4(p.coord, 1.0) + center;
  mat4 MV = gl_ProjectionMatrix * gl_ModelViewMatrix;
  gl_Position = MV * cc;
  vertexEyeSpace = vec3(gl_ModelViewMatrix * cc);
  fs_normal = gl_NormalMatrix * norm;
  fs_texCoord = p.texCoord;
  EmitVertex();
}

void level0(MyDiv a, MyDiv b, MyDiv c) {
  draw(a, a.coord/radius);
  draw(b, b.coord/radius);
  draw(c, c.coord/radius);
  EndPrimitive();
}

void level1(MyDiv a, MyDiv b, MyDiv c) {
  MyDiv ab = makecenter(a,b);
  MyDiv ac = makecenter(a,c);
  MyDiv bc = makecenter(b,c);
  draw(ab, ab.coord/radius);
  draw(b, b.coord/radius);
  draw(bc, bc.coord/radius);
  EndPrimitive();
  draw(a, a.coord/radius);
  draw(ab, ab.coord/radius);
  draw(ac, ac.coord/radius);
  draw(bc, bc.coord/radius);
  draw(c, c.coord/radius);
  EndPrimitive();
}

void level2(MyDiv a, MyDiv b, MyDiv c) {
  MyDiv ab = makecenter(a,b);
  MyDiv ac = makecenter(a,c);
  MyDiv bc = makecenter(b,c);
  level1(ab,b,bc);
  level1(a,ab,ac);
  level1(ac,bc,c);
  level1(ab,bc,ac);
}

void level3(MyDiv a, MyDiv b, MyDiv c) {
  MyDiv ab = makecenter(a,b);
  MyDiv ac = makecenter(a,c);
  MyDiv bc = makecenter(b,c);
  level2(ab,b,bc);
  level2(a,ab,ac);
  level2(ac,bc,c);
  level2(ab,bc,ac);
}

void main() {
  MyDiv a=mydiv[0], b=mydiv[1], c=mydiv[2];
  if (level == 3) level3(a,b,c);
  else if (level == 2) level2(a,b,c);
  else if (level == 1) level1(a,b,c);
  else level0(a,b,c); 
}