#version 150 compatibility

varying vec3 vertexEyeSpace;
varying vec3 fs_normal;
varying vec2 fs_texCoord;
uniform sampler2D colorTexture;
float grid(float g) {
  float f = abs(g*10.0 - round(g*10.0));
  if (f > 0.1) return 1.0;
  return 0.0;
}

void main() {
  // in gl_TextCoord[n] : vec4
  // in gl_LightSource[n] : { ambient: vec4, diffuse: vec4, specular: vec4, position: vec4 }
  // in gl_FrontMaterial : { ambient: vec4, diffuse: vec4, specular: vec4, shininess: float}
  // out gl_FragColor : vec4   output pixel color

  vec4 colorSum = vec4(0.0f);
  vec4 tex = texture(colorTexture, fs_texCoord);
  vec3 N = normalize(fs_normal);
  vec3 V = normalize(-vertexEyeSpace); // eye position - object position
  for (int i = 0; i < 1; i++) {
    vec3 L = normalize(gl_LightSource[i].position.xyz - vertexEyeSpace); // light vec
    vec3 R = normalize(reflect(-L, N)); // reflect vec

    // Ia = La * Ka
    vec4 Ia = gl_LightSource[i].ambient * gl_FrontMaterial.ambient;

    // Id = Ld * Kd * dot(L,N)
    // note: cannot have negative light
    vec4 Id = gl_LightSource[i].diffuse * gl_FrontMaterial.diffuse * max(0.0f, dot(L,N));

    // Is = Ls * Ks * dot(R,V)^Ns
    float shine = pow(max(0.0f, dot(R, V)), gl_FrontMaterial.shininess);
    vec4 Is = gl_LightSource[i].specular * gl_FrontMaterial.specular * shine;

    colorSum += Ia + Id + Is;
  }
  float gg = 1.0;
  //gg = grid(gl_TexCoord[0].x) * grid(gl_TexCoord[0].y);
  gl_FragColor = vec4(colorSum * tex) * gg;
}
